#include <iostream>
#include <vector>
#include <queue>

using namespace std;

bool hasEulerCircuit(int N, int M, const vector<pair<int, int>>& edges) {
    vector<vector<int>> adjacencyList(N + 1);  // 邻接表表示图
    vector<int> degrees(N + 1, 0);  // 存储每个节点的度数

    // 构建邻接表和统计每个节点的度数
    for (const auto& edge : edges) {
        int u = edge.first;
        int v = edge.second;
        adjacencyList[u].push_back(v);
        adjacencyList[v].push_back(u);
        degrees[u]++;
        degrees[v]++;
    }

    // 检查图的连通性
    vector<bool> visited(N + 1, false);
    queue<int> q;
    q.push(1);
    visited[1] = true;

    while (!q.empty()) {
        int node = q.front();
        q.pop();

        for (int neighbor : adjacencyList[node]) {
            if (!visited[neighbor]) {
                q.push(neighbor);
                visited[neighbor] = true;
            }
        }
    }

    // 检查是否存在未访问的节点
    for (int i = 1; i <= N; ++i) {
        if (!visited[i]) {
            return false;
        }
    }

    // 检查是否存在度数为奇数的节点
    for (int degree : degrees) {
        if (degree % 2 != 0) {
            return false;
        }
    }

    return true;
}

int main() {
    int N, M;
    cin >> N >> M;

    vector<pair<int, int>> edges;
    for (int i = 0; i < M; ++i) {
        int u, v;
        cin >> u >> v;
        edges.emplace_back(u, v);
    }

    bool result = hasEulerCircuit(N, M, edges);
    cout << (result ? 1 : 0) << endl;

    return 0;
}
