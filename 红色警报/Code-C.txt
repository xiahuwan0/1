#include <stdio.h>
#include <string.h>

int p[1000];

int get(int x) {
    if (p[x] != x)
        p[x] = get(p[x]);
    return p[x];
}

void unionSets(int x, int y) {
    int fx = get(x);
    int fy = get(y);
    if (fx != fy)
        p[fy] = fx; // 把fx设为根节点
}

typedef struct {
    int a;
    int b;
} Edge;

int main() {
    int n, i, m, c1 = 0, c2 = 0, f[10000], flag = 0;
    memset(f, 0, sizeof(f));
    Edge edges[10000];

    scanf("%d %d", &n, &m);

    for (i = 0; i < n; i++)
        p[i] = i;

    for (i = 0; i < m; i++) {
        scanf("%d %d", &edges[i].a, &edges[i].b);
        unionSets(edges[i].a, edges[i].b);
    }

    for (i = 0; i < n; i++) {
        if (p[i] == i)
            c1++;
    }

    int k, g, j;
    scanf("%d", &k);

    for (i = 0; i < k; i++) {
        c2 = 0;
        scanf("%d", &g);
        f[g] = 1;

        for (j = 0; j < n; j++)
            p[j] = j;

        for (j = 0; j < m; j++) {
            if (f[edges[j].a] == 1 || f[edges[j].b] == 1)
                continue;
            unionSets(edges[j].a, edges[j].b);
        }

        for (j = 0; j < n; j++) {
            if (p[j] == j)
                c2++;
        }

        if (c2 == c1 || c2 == c1 + 1)
            printf("City %d is lost.\n", g);
        else
            printf("Red Alert: City %d is lost!\n", g);

        c1 = c2;
    }

    if (k >= n)
        printf("Game Over.");

    return 0;
}

